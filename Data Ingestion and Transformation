---************Activity 1. Create Stage and RAW file
CREATE OR REPLACE stage MANAGE_DB.EXTERNAL_STAGES.JSONSTAGE
url='s3://bucketsnowflake-jsondemo';
 
 
--Creating schema to keep things organized
CREATE OR REPLACE SCHEMA MANAGE_DB.file_formats;
 
CREATE OR REPLACE file format MANAGE_DB.FILE_FORMATS.JSONFORMAT
TYPE = JSON;
 
CREATE OR REPLACE DATABASE OUR_FIRST_DB;
--Create a table to load raw data , this table have only one column with type variant .
CREATE OR REPLACE table OUR_FIRST_DB.PUBLIC.JSON_RAW (raw_file variant);
 
--LOAD THE DATA IN TBALE
 
--Load JSON file in Our Stage
 
COPY INTO OUR_FIRST_DB.PUBLIC.JSON_RAW
FROM @MANAGE_DB.EXTERNAL_STAGES.JSONSTAGE
file_format= MANAGE_DB.FILE_FORMATS.JSONFORMAT
files = ('HR_data.json');
 
--.Display Table
SELECT * FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
 
--***************ACTIVITY-2: Parsing JSON***************
--Selecting attribute/column
SELECT RAW_FILE:city FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
 
--.Retriving Data from Column Number ( as we have only 1 column)
SELECT $1:first_name FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
--Selecting attribute/column – formatted ( String Data)
SELECT RAW_FILE:first_name::string as first_name FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
--Selecting attribute/column – formatted ( Integer Data)
SELECT RAW_FILE:id::int as id FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
--Retrieving Data from Multiple column
SELECT
RAW_FILE:id::int as id,
RAW_FILE:first_name::STRING as first_name,
RAW_FILE:last_name::STRING as last_name,
RAW_FILE:gender::STRING as gender
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;



--*********ACTIVITY 3 & 4 : Handling nested data and Array

--Load nested data ( Job Column contain Nested Data)
SELECT * FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
SELECT RAW_FILE:job as job FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
 
--Split nested data by using . dot operator

SELECT
RAW_FILE:job.salary::INT as salary
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
--Split nested data in to multiple column
SELECT
RAW_FILE:first_name::STRING as first_name,
RAW_FILE:job.salary::INT as salary,
RAW_FILE:job.title::STRING as title
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
 
--Handling Array Data
SELECT
RAW_FILE:prev_company as prev_company
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
--.Capturing First Entry in Array ( here in query0 for 1st value nad  1 stands for 2nd value in Array)
SELECT
RAW_FILE:prev_company[0]::STRING as prev_company
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
--Display the value count in each Array -ARRAY_SIZE
SELECT
ARRAY_SIZE(RAW_FILE:prev_company) as prev_company
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
 
-- END of Activity 3 and 4

-- Activity 5 and 6
SELECT RAW_FILE:spoken_languages as spoken_languages FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
SELECT RAW_FILE:first_name::STRING as First_name,
       RAW_FILE:spoken_languages[0].language::STRING as First_language,         
       RAW_FILE:spoken_languages[0].level::STRING as Level_spoken 
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;

select 
       RAW_FILE:first_name::STRING as First_name, 
       f.value:language::STRING as First_language, 
       f.value:level::STRING as Level_spoken 
from OUR_FIRST_DB.PUBLIC.JSON_RAW, table(flatten(RAW_FILE:spoken_languages)) f;

CREATE OR REPLACE TABLE Languages AS 
select 
        RAW_FILE:first_name::STRING as First_name, 
        f.value:language::STRING as First_language, 
        f.value:level::STRING as Level_spoken 
from OUR_FIRST_DB.PUBLIC.JSON_RAW, table(flatten(RAW_FILE:spoken_languages)) f;

SELECT * FROM Languages;

truncate table languages;

INSERT INTO Languages 
select 
        RAW_FILE:first_name::STRING as First_name, 
        f.value:language::STRING as First_language, 
        f.value:level::STRING as Level_spoken 
from OUR_FIRST_DB.PUBLIC.JSON_RAW, table(flatten(RAW_FILE:spoken_languages)) f;

SELECT * FROM Languages;
