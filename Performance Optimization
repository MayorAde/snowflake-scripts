CREATE WAREHOUSE DBA_WH 
WITH WAREHOUSE_SIZE = 'XSMALL'
WAREHOUSE_TYPE = 'STANDARD' 
AUTO_SUSPEND = 300 
AUTO_RESUME = TRUE 
MIN_CLUSTER_COUNT = 1 
MAX_CLUSTER_COUNT = 1 
SCALING_POLICY = 'STANDARD';

CREATE WAREHOUSE DS_WH 
WITH WAREHOUSE_SIZE = 'SMALL'
WAREHOUSE_TYPE = 'STANDARD' 
AUTO_SUSPEND = 300 
AUTO_RESUME = TRUE 
MIN_CLUSTER_COUNT = 1 
MAX_CLUSTER_COUNT = 1 
SCALING_POLICY = 'STANDARD';

CREATE ROLE DATA_SCIENTIST;
GRANT USAGE ON WAREHOUSE DS_WH TO ROLE DATA_SCIENTIST;
CREATE ROLE DBA;
GRANT USAGE ON WAREHOUSE DBA_WH TO ROLE DBA;

CREATE USER DS1 PASSWORD = 'DS1' LOGIN_NAME = 'DS1' DEFAULT_ROLE='DATA_SCIENTIST' 
DEFAULT_WAREHOUSE = 'DS_WH' MUST_CHANGE_PASSWORD = FALSE;
CREATE USER DS2 PASSWORD = 'DS2' LOGIN_NAME = 'DS2' DEFAULT_ROLE='DATA_SCIENTIST' 
DEFAULT_WAREHOUSE = 'DS_WH' MUST_CHANGE_PASSWORD = FALSE;
CREATE USER DS3 PASSWORD = 'DS3' LOGIN_NAME = 'DS3' DEFAULT_ROLE='DATA_SCIENTIST' 
DEFAULT_WAREHOUSE = 'DS_WH' MUST_CHANGE_PASSWORD = FALSE;
GRANT ROLE DATA_SCIENTIST TO USER DS1;
GRANT ROLE DATA_SCIENTIST TO USER DS2;
GRANT ROLE DATA_SCIENTIST TO USER DS3;


CREATE USER DBA1 PASSWORD = 'DBA1' LOGIN_NAME = 'DBA1' DEFAULT_ROLE='DBA' 
DEFAULT_WAREHOUSE = 'DBA_WH' MUST_CHANGE_PASSWORD = FALSE;
CREATE USER DBA2 PASSWORD = 'DBA2' LOGIN_NAME = 'DBA2' DEFAULT_ROLE='DBA' 
DEFAULT_WAREHOUSE = 'DBA_WH' MUST_CHANGE_PASSWORD = FALSE;
GRANT ROLE DBA TO USER DBA1;
GRANT ROLE DBA TO USER DBA2;


DROP USER DBA1;
DROP USER DBA2;
DROP USER DS1;
DROP USER DS2;
DROP USER DS3;
DROP ROLE DATA_SCIENTIST;
DROP ROLE DBA;
DROP WAREHOUSE DS_WH;
DROP WAREHOUSE DBA_WH;


--****ACTIVITY-2 : Scaling up ( Using Snowflake UI)
SHOW warehouses;

CREATE WAREHOUSE COMPUTE_ABHI
WITH WAREHOUSE_SIZE = 'SMALL'
WAREHOUSE_TYPE = 'STANDARD' 
AUTO_SUSPEND = 300 
AUTO_RESUME = TRUE 
MIN_CLUSTER_COUNT = 1 
MAX_CLUSTER_COUNT = 1 
SCALING_POLICY = 'STANDARD';
--Scale up / down
ALTER WAREHOUSE COMPUTE_ABHI SET WAREHOUSE_SIZE = 'MEDIUM';
 
ALTER WAREHOUSE COMPUTE_ABHI SET WAREHOUSE_SIZE = 'X-Small';

--*********ACTIVITY 3: Scale Out (Snowflake SQL)*********
 
SHOW WAREHOUSES;
ALTER WAREHOUSE COMPUTE_ABHI SET MAX_CLUSTER_COUNT= 5;
ALTER WAREHOUSE COMPUTE_ABHI SET MAX_CLUSTER_COUNT= 2;

--***********ACTIVITY 5 : Caching************
 
 
--Run the following Query and check query execution time.
SELECT AVG(C_BIRTH_YEAR) FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER;
 
-- i need to monitor query execution time = 1.5s
 
-- caching
 
--Run the same query (mentioned in step 1) one more time , and check execution time . 87ms
 
SELECT AVG(C_BIRTH_YEAR) FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER;
 
-- i need to monitor query execution time = 74ms
CREATE OR REPLACE DATABASE COPY_DB;
 
CREATE OR REPLACE TABLE COPY_DB.PUBLIC.ORDERS (
ORDER_ID VARCHAR(30),
AMOUNT VARCHAR(30),
PROFIT INT,
QUANTITY INT,
CATEGORY VARCHAR(30),
SUBCATEGORY VARCHAR(30));
 
--Prepare stage object , and list it
CREATE OR REPLACE STAGE COPY_DB.PUBLIC.aws_stage_copy
url='s3://snowflakebucket-copyoption/size/';
 
LIST @COPY_DB.PUBLIC.aws_stage_copy;
COPY INTO COPY_DB.PUBLIC.ORDERS
FROM @COPY_DB.PUBLIC.aws_stage_copy
file_format= (type = csv field_delimiter=',' skip_header=1)
pattern='Orders.csv';
 
 
select * from copy_db.public.orders;

--create a table order

 CREATE OR REPLACE TABLE copy_db.public.ORDERS_CACHING (
ORDER_ID VARCHAR(30),
AMOUNT NUMBER(38,0),
PROFIT NUMBER(38,0),
QUANTITY NUMBER(38,0),
CATEGORY VARCHAR(30),
SUBCATEGORY VARCHAR(30),
DATE DATE );

ALTER WAREHOUSE COMPUTE_WH SET WAREHOUSE_SIZE = '4X-Large';

INSERT INTO ORDERS_CACHING
SELECT
 t1.ORDER_ID,
 t1.AMOUNT,
 t1.PROFIT,
 t1.QUANTITY,
 t1.CATEGORY,
 t1.SUBCATEGORY,
 DATE(UNIFORM(15000000000,17000000000,(RANDOM())))
FROM ORDERS t1
CROSS JOIN (SELECT * FROM ORDERS) t2
CROSS JOIN (SELECT TOP 100 * FROM ORDERS) t3;

ALTER WAREHOUSE COMPUTE_WH SET WAREHOUSE_SIZE = '2X-Large';

SELECT * FROM ORDERS_CACHING WHERE DATE = '2020-06-09';
SELECT * FROM ORDERS_CACHING;
ALTER TABLE ORDERS_CACHING CLUSTER BY ( DATE ) ;

SELECT * FROM ORDERS_CACHING WHERE DATE = '2447-02-06';

ALTER WAREHOUSE COMPUTE_WH SET WAREHOUSE_SIZE = 'X-Small';


CREATE STORAGE INTEGRATION azure_integration 
TYPE = EXTERNAL_STAGE STORAGE_PROVIDER = AZURE 
ENABLED = TRUE 
AZURE_TENANT_ID = 'a279d8d3-a42d-457b-82ea-492a1b496c3f' 
STORAGE_ALLOWED_LOCATIONS = ('azure://<storage-acc>.blob.core.windows.net/<container>');

DESC STORAGE integration azure_integration;

