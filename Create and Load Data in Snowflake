CREATE DATABASE TEST_DATABASE_5;
USE DATABASE TEST_DATABASE_5;

COPY INTO LOAN_PAYMENT
 FROM s3://bucketsnowflakes3/Loan_payments_data.csv
 file_format = (type = csv 
 field_delimiter = ',' 
 skip_header=1);

 SELECT * FROM LOAN_PAYMENT;

 CREATE OR REPLACE DATABASE MANAGE_DB;
 CREATE OR REPLACE SCHEMA external_stages;
 CREATE OR REPLACE STAGE MANAGE_DB.external_stages.aws_stage
 url='s3://bucketsnowflakes3';

 LIST @aws_stage;

 CREATE OR REPLACE DATABASE OUR_FIRST_DB;

 CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS (
 ORDER_ID VARCHAR(30),
 AMOUNT INT,
 PROFIT INT,
 QUANTITY INT,
 CATEGORY VARCHAR(30),
 SUBCATEGORY VARCHAR(30));

 SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS;

COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS
FROM @MANAGE_DB.external_stages.aws_stage
file_format= (type = csv field_delimiter=',' skip_header=1);
LIST @MANAGE_DB.external_stages.aws_stage; 

COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS
FROM @MANAGE_DB.external_stages.aws_stage
file_format= (type = csv field_delimiter=',' skip_header=1)
files = ('OrderDetails.csv');

SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS;

CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX (
ORDER_ID VARCHAR(30),
 AMOUNT INT );

 COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX
 FROM (select s.$1, s.$2 from @MANAGE_DB.external_stages.aws_stage s)
 file_format= (type = csv field_delimiter=',' skip_header=1) 
 files=('OrderDetails.csv');

 CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX (
ORDER_ID VARCHAR(30),
AMOUNT INT,
PROFIT INT,
 PROFITABLE_FLAG VARCHAR(30)
 );


 COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX
 FROM (select 
 s.$1,
 s.$2, 
 s.$3,
 CASE WHEN CAST(s.$3 as int) < 0 THEN 'not profitable' ELSE 'profitable' 
END 
 from @MANAGE_DB.external_stages.aws_stage s)
 file_format= (type = csv field_delimiter=',' skip_header=1)
 files=('OrderDetails.csv');
 SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS_EX;

 CREATE OR REPLACE STAGE MANAGE_DB.external_stages.aws_stage_errorex
 url='s3://bucketsnowflakes4';
 LIST @MANAGE_DB.external_stages.aws_stage_errorex;

 
CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX (
 ORDER_ID VARCHAR(30),
 AMOUNT INT,
 PROFIT INT,
 QUANTITY INT,
 CATEGORY VARCHAR(30),
 SUBCATEGORY VARCHAR(30));

 COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX
 FROM @MANAGE_DB.external_stages.aws_stage_errorex
 file_format= (type = csv field_delimiter=',' skip_header=1)
 files = ('OrderDetails_error.csv');

 SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS_EX ; 

-- Continue loading rows, skip only the bad ones
 COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX
 FROM @MANAGE_DB.external_stages.aws_stage_errorex
 file_format= (type = csv field_delimiter=',' skip_header=1)
 files = ('OrderDetails_error.csv')
 ON_ERROR = 'CONTINUE';
SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS_EX;
SELECT COUNT(*) FROM OUR_FIRST_DB.PUBLIC.ORDERS_EX;

TRUNCATE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX;
COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX
 FROM @MANAGE_DB.external_stages.aws_stage_errorex
 file_format= (type = csv field_delimiter=',' skip_header=1)
 files = ('OrderDetails_error.csv','OrderDetails_error2.csv')
 ON_ERROR = 'ABORT_STATEMENT'; 

 SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS_EX;
SELECT COUNT(*) FROM OUR_FIRST_DB.PUBLIC.ORDERS_EX;

TRUNCATE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX;

COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX
 FROM @MANAGE_DB.external_stages.aws_stage_errorex
 file_format= (type = csv field_delimiter=',' skip_header=1)
 files = ('OrderDetails_error.csv','OrderDetails_error2.csv')
 ON_ERROR = 'SKIP_FILE';

  CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX (
 ORDER_ID VARCHAR(30),
 AMOUNT INT,
 PROFIT INT,
 QUANTITY INT,
 CATEGORY VARCHAR(30),
 SUBCATEGORY VARCHAR(30));

CREATE OR REPLACE SCHEMA MANAGE_DB.file_formats;
CREATE OR REPLACE file format MANAGE_DB.file_formats.my_file_format;
DESC file format MANAGE_DB.file_formats.my_file_format;

ALTER file format MANAGE_DB.file_formats.my_file_format
SET SKIP_HEADER = 1;

COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX
 FROM @MANAGE_DB.external_stages.aws_stage_errorex
 file_format= (FORMAT_NAME=MANAGE_DB.file_formats.my_file_format)
 files = ('OrderDetails_error.csv')
 ON_ERROR = 'SKIP_FILE_3';

 CREATE OR REPLACE DATABASE COPY_DB;

 CREATE OR REPLACE TABLE COPY_DB.PUBLIC.ORDERS (
 ORDER_ID VARCHAR(30),
 AMOUNT VARCHAR(30),
 PROFIT INT,
 QUANTITY INT,
 CATEGORY VARCHAR(30),
 SUBCATEGORY VARCHAR(30));

 CREATE OR REPLACE STAGE COPY_DB.PUBLIC.aws_stage_copy
url='s3://snowflakebucket-copyoption/size/';
 
LIST @COPY_DB.PUBLIC.aws_stage_copy;

COPY INTO COPY_DB.PUBLIC.ORDERS
 FROM @COPY_DB.PUBLIC.aws_stage_copy
 file_format= (type = csv field_delimiter=',' skip_header=1)
 pattern='.*Order.*'
 VALIDATION_MODE = RETURN_ERRORS;

 COPY INTO COPY_DB.PUBLIC.ORDERS
 FROM @COPY_DB.PUBLIC.aws_stage_copy
 file_format= (type = csv field_delimiter=',' skip_header=1)
 pattern='.*Order.*'
 VALIDATION_MODE = RETURN_5_ROWS ;

 create or replace stage copy_db.public.aws_stage_copy
 url ='s3://snowflakebucket-copyoption/returnfailed/';
 
list @copy_db.public.aws_stage_copy;
 


copy into copy_db.public.orders
 from @copy_db.public.aws_stage_copy
 file_format = (type=csv field_delimiter=',' skip_header=1)
 pattern='.*Order.*'
 validation_mode=return_errors;

copy into copy_db.public.orders
 from @copy_db.public.aws_stage_copy
 file_format = (type=csv field_delimiter=',' skip_header=1)
 pattern='.*Order.*'
 validation_mode=return_5_rows;

 copy into copy_db.public.orders
 from @copy_db.public.aws_stage_copy
 file_format = (type=csv field_delimiter=',' skip_header=1)
 pattern='.*Order.*'
 validation_mode=return_7_rows;

copy into copy_db.public.orders
 from @copy_db.public.aws_stage_copy
 file_format = (type=csv field_delimiter=',' skip_header=1)
 pattern='.*error.*'
 validation_mode=return_7_rows;


CREATE OR REPLACE TABLE COPY_DB.PUBLIC.ORDERS (
 ORDER_ID VARCHAR(30),
 AMOUNT VARCHAR(30),
 PROFIT INT,
 QUANTITY INT,
 CATEGORY VARCHAR(30),
 SUBCATEGORY VARCHAR(30));

COPY INTO COPY_DB.PUBLIC.ORDERS
 FROM @aws_stage_copy
 file_format= (type = csv field_delimiter=',' skip_header=1)
 pattern='.*Order.*'
 VALIDATION_MODE = RETURN_ERRORS;
 
CREATE OR REPLACE TABLE rejected AS 
select rejected_record from table(result_scan(last_query_id()));
// display table
Select * from rejected;

COPY INTO COPY_DB.PUBLIC.ORDERS
 FROM @aws_stage_copy
 file_format= (type = csv field_delimiter=',' skip_header=1)
 pattern='.*Order.*'
 ON_ERROR=CONTINUE;

select * from table(validate(orders, job_id => '_last'));

SELECT REJECTED_RECORD FROM rejected;
CREATE OR REPLACE TABLE rejected_values as
SELECT 
SPLIT_PART(rejected_record,',',1) as ORDER_ID, 
SPLIT_PART(rejected_record,',',2) as AMOUNT, 
SPLIT_PART(rejected_record,',',3) as PROFIT, 
SPLIT_PART(rejected_record,',',4) as QUATNTITY, 
SPLIT_PART(rejected_record,',',5) as CATEGORY, 
SPLIT_PART(rejected_record,',',6) as SUBCATEGORY
FROM rejected;
SELECT * FROM rejected_values;


CREATE OR REPLACE DATABASE COPY_DB;
CREATE OR REPLACE TABLE COPY_DB.PUBLIC.ORDERS (
 ORDER_ID VARCHAR(30),
 AMOUNT VARCHAR(30),
 PROFIT INT,
 QUANTITY INT,
 CATEGORY VARCHAR(30),
 SUBCATEGORY VARCHAR(30));

 CREATE OR REPLACE STAGE COPY_DB.PUBLIC.aws_stage_copy
 url='s3://snowflakebucket-copyoption/size/';
 
 
// List files in stage
LIST @aws_stage_copy;

COPY INTO COPY_DB.PUBLIC.ORDERS
 FROM @aws_stage_copy
 file_format= (type = csv field_delimiter=',' skip_header=1)
 pattern='.*Order.*'
 SIZE_LIMIT=20000;


CREATE OR REPLACE TABLE COPY_DB.PUBLIC.ORDERS (
 ORDER_ID VARCHAR(30),
 AMOUNT VARCHAR(30),
 PROFIT INT,
 QUANTITY INT,
 CATEGORY VARCHAR(30),
 SUBCATEGORY VARCHAR(30));
 
COPY INTO COPY_DB.PUBLIC.ORDERS
 FROM @aws_stage_copy
 file_format= (type = csv field_delimiter=',' skip_header=1)
 pattern='.*Order.*'
 SIZE_LIMIT=60000;





